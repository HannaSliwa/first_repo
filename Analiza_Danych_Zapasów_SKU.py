{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HannaSliwa/first_repo/blob/main/Analiza_Danych_Zapas%C3%B3w_SKU.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "def analyze_stock_data(file_path, kraj=None, nazwa_klienta=None, typ_klienta=None, wyswietl_wykresy=False):\n",
        "    \"\"\"\n",
        "    Analizuje dane zapasów z pliku Excel, oblicza ranking top 5 SKU\n",
        "    pod względem ilości i wartości zapasu, a następnie wyświetla wyniki,\n",
        "    uwzględniając opcjonalne filtry. Dodatkowo, opcjonalnie wyświetla\n",
        "    wykresy analizowanych danych.\n",
        "\n",
        "    Argumenty:\n",
        "        file_path (str): Ścieżka do pliku Excel z danymi.\n",
        "        kraj (str, opcjonalnie): Kraj do filtrowania danych.\n",
        "        nazwa_klienta (str, opcjonalnie): Nazwa klienta do filtrowania danych.\n",
        "        typ_klienta (str, opcjonalnie): Typ klienta do filtrowania danych.\n",
        "        wyswietl_wykresy (bool, opcjonalnie): Czy wyświetlić wykresy analizowanych danych.\n",
        "\n",
        "    Zwraca:\n",
        "        None: Funkcja wyświetla wyniki analizy.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        # Wczytanie danych z pliku Excel do DataFrame\n",
        "        df = pd.read_excel(file_path)\n",
        "\n",
        "        # Sprawdzenie, czy wymagane kolumny istnieją w DataFrame\n",
        "        required_columns = ['Material', 'total stock at the risk in volume', 'total stock at risk in value']\n",
        "        for col in required_columns:\n",
        "            if col not in df.columns:\n",
        "                print(f\"Błąd: W pliku Excel brakuje kolumny '{col}'.\")\n",
        "                return  # Zakończ funkcję, jeśli brakuje kolumny\n",
        "\n",
        "        # Sprawdzenie, czy kolumny filtrujące istnieją\n",
        "        filter_columns = ['Main country', 'Main Customer', 'Main Customer Type']\n",
        "        for col in [kraj, nazwa_klienta, typ_klienta]:\n",
        "            if col is not None and col not in df.columns:\n",
        "                print(f\"Błąd: W pliku Excel brakuje kolumny filtrującej: '{col}'.\")\n",
        "                return\n",
        "\n",
        "        # Filtrowanie danych na podstawie podanych kryteriów\n",
        "        if kraj:\n",
        "            df = df[df['Main country'] == kraj]\n",
        "        if nazwa_klienta:\n",
        "            df = df[df['Main Customer'] == nazwa_klienta]\n",
        "        if typ_klienta:\n",
        "            df = df[df['Main Customer Type'] == typ_klienta]\n",
        "\n",
        "        # Grupowanie danych po SKU (Material) i sumowanie ilości i wartości zapasu\n",
        "        grouped_df = df.groupby('Material').sum()\n",
        "\n",
        "        # Sortowanie SKU według ilości zapasu malejąco i wybór top 5\n",
        "        top_5_by_volume = grouped_df.sort_values(by='total stock at the risk in volume', ascending=False).head(5)\n",
        "\n",
        "        # Sortowanie SKU według wartości zapasu malejąco i wybór top 5\n",
        "        top_5_by_value = grouped_df.sort_values(by='total stock at risk in value', ascending=False).head(5)\n",
        "\n",
        "        # Wyświetlenie wyników\n",
        "        print(\"Top 5 SKU pod względem ilości zapasu:\")\n",
        "        print(top_5_by_volume[['total stock at the risk in volume']].to_markdown(numalign='left', stralign='left'))\n",
        "\n",
        "        print(\"\\nTop 5 SKU pod względem wartości zapasu:\")\n",
        "        print(top_5_by_value[['total stock at risk in value']].to_markdown(numalign='left', stralign='left'))\n",
        "\n",
        "        # Wyświetlenie wykresów, jeśli `wyswietl_wykresy` jest True\n",
        "        if wyswietl_wykresy:\n",
        "            wyswietl_wykresy_zapasow(grouped_df)\n",
        "\n",
        "    except FileNotFoundError:\n",
        "        print(f\"Błąd: Plik '{file_path}' nie został znaleziony.\")\n",
        "    except Exception as e:\n",
        "        print(f\"Wystąpił błąd podczas przetwarzania pliku: {e}\")\n",
        "\n",
        "def wyswietl_wykresy_zapasow(df):\n",
        "    \"\"\"\n",
        "    Generuje i wyświetla wykresy analizowanych danych zapasów.\n",
        "\n",
        "    Argumenty:\n",
        "        df (pandas.DataFrame): DataFrame zawierający zagregowane dane zapasów,\n",
        "            gdzie indeks to SKU (Material), a kolumny to m.in.\n",
        "            'total stock at the risk in volume' i 'total stock at risk in value'.\n",
        "    \"\"\"\n",
        "    # Wykres słupkowy: Ilość zapasu dla top 10 SKU\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    top_10_volume = df.nlargest(10, 'total stock at the risk in volume')\n",
        "    sns.barplot(x=top_10_volume.index, y=top_10_volume['total stock at the risk in volume'])\n",
        "    plt.title('Top 10 SKU pod względem ilości zapasu')\n",
        "    plt.xlabel('SKU (Material)')\n",
        "    plt.ylabel('Ilość zapasu')\n",
        "    plt.xticks(rotation=45, ha=\"right\")\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Wykres słupkowy: Wartość zapasu dla top 10 SKU\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    top_10_value = df.nlargest(10, 'total stock at risk in value')\n",
        "    sns.barplot(x=top_10_value.index, y=top_10_value['total stock at risk in value'])\n",
        "    plt.title('Top 10 SKU pod względem wartości zapasu')\n",
        "    plt.xlabel('SKU (Material)')\n",
        "    plt.ylabel('Wartość zapasu')\n",
        "    plt.xticks(rotation=45, ha=\"right\")\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Ścieżka do pliku Excel (zastąp 'Stock@Risk_PL_example.xlsx' rzeczywistą ścieżką)\n",
        "    file_path = 'Stock@Risk_PL_ example.xlsx'\n",
        "    # Przykładowe użycie z filtrowaniem (możesz dostosować wartości filtrów)\n",
        "    kraj_filtr = 'Polska'\n",
        "    nazwa_klienta_filtr = 'Klient A'\n",
        "    typ_klienta_filtr = 'Detaliczny'\n",
        "\n",
        "    # Dodano parametr wyswietl_wykresy\n",
        "    analyze_stock_data(file_path, kraj_filtr, nazwa_klienta_filtr, typ_klienta_filtr, wyswietl_wykresy=True)\n",
        "    # Możesz też wywołać funkcję bez filtrów i bez wykresów:\n",
        "    # analyze_stock_data(file_path)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "VvC7cGZpmA_0"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}